package com.movieflix.services;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;




import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.movieflix.dto.MovieDto;
import com.movieflix.entities.Movie;
import com.movieflix.repositories.MovieRepository;

@Service
public class MovieServiceImpl implements MovieService {
	
	
	private final MovieRepository movieRepository;
	
	
	private final FileService fileService;
	
	//constructor injection
	public MovieServiceImpl(MovieRepository movieRepository, FileService fileService) {
		super();
		this.movieRepository = movieRepository;
		this.fileService = fileService;
	}

	@Value("${project.poster}")
	private String path;
	
	@Value("${base.url}")
	private String baseUrl;

	@Override
	public MovieDto addMovie(MovieDto movieDto, MultipartFile file) throws IOException {
		
		// 1.upload the file
		   if(Files.exists(Paths.get(path + File.separator + file.getOriginalFilename()))) {
			   throw new RuntimeException( "File already exists ! please enter another file name !");
		   }
		   String uploadedFileName = fileService.uploadFile(path, file);
		
		// 2.set the value of field 'poster' as filename
		   movieDto.setPoster(uploadedFileName);
		
		// 3.map dto to movie object
		   Movie  movie = new Movie (
				   null,	//movieid
				   movieDto.getTitle(),
				   movieDto.getDirector(),
				   movieDto.getStudio(),
				   movieDto.getMovieCast(),
				   movieDto.getReleaseYear(),
				   movieDto.getPoster()
		   );
		
		// 4.save the movie object ( it will return saved movie object)
		   Movie savedMovie = movieRepository.save(movie);
		// 5.generate the poster url
		   
		   String posterUrl = baseUrl + "/file/" + uploadedFileName;
		
		//6.map movie object to dto object and return it
		   MovieDto response = new MovieDto(
				savedMovie.getMovieId(),
				savedMovie.getTitle(),
				savedMovie.getDirector(),
				savedMovie.getStudio(),
				savedMovie.getMovieCast(),
				savedMovie.getReleaseYear(),
				savedMovie.getPoster(),
				posterUrl
		   );
		   
		
		return response;
	}

	@Override
	public MovieDto getMovie(Integer movieId) {
		// 1. check the data in db and if exists, fetch the data of given id
			Movie movie = movieRepository.findById(movieId).orElseThrow(() -> new RuntimeException("Movie not found"));
		// 2. Generate poster url 
			String posterUrl = baseUrl + "/file/" + movie.getPoster();		
		// 3. map to MovieDto object and return it
			MovieDto response = new MovieDto(
					movie.getMovieId(),
					movie.getTitle(),
					movie.getDirector(),
					movie.getStudio(),
					movie.getMovieCast(),
					movie.getReleaseYear(),
					movie.getPoster(),
					posterUrl
			   );
		return response;
	}

	@Override
	public List<MovieDto> getAllMovie() {
		// 1.fetch all data from db
			List<Movie> movies = movieRepository.findAll();
			
			List<MovieDto> movieDtos = new ArrayList<>();
		
		// 2.iterate through the list and generate poster url for each movie object and map to movie dto object
			for(Movie movie : movies) {
				String posterUrl = baseUrl + "/file/" + movie.getPoster();
				MovieDto movieDto = new MovieDto(
						movie.getMovieId(),
						movie.getTitle(),
						movie.getDirector(),
						movie.getStudio(),
						movie.getMovieCast(),
						movie.getReleaseYear(),
						movie.getPoster(),
						posterUrl
				   );
				movieDtos.add(movieDto);
			}
		
		return movieDtos;
	}

	@Override
	public MovieDto updateMovie(Integer movieId, MovieDto movieDto, MultipartFile file) throws IOException {
		// 1.Check if movie object exists with given movie id
		Movie mv = movieRepository.findById(movieId).orElseThrow(() -> new RuntimeException("Movie not found"));
		
	    // 2. if file is null, do nothing
		// but if the file is not null, then delete the existing file associated with the record,
		//and upload the new file
		
		String fileName = movie.getPoster();
		if(file != null) {
			Files.deleteIfExists(Paths.get(path + File.separator + fileName));
			fileName = fileService.uploadFile(path, file);
		}
		
		// 3. set  movieDto's poster value, according to step2
		
		movieDto.setPoster(fileName);
		
		// 4. map  it to movie object
		Movie movie = new Movie(
				
		);
		
		// 5. save the movie object -> return saved movie object
		
		// 6. generate postUrl for it
		
		// 7. map to movieDto and return it
		return null;
	}

	@Override
	public String deleteMovie(Integer movieId) {
		// TODO Auto-generated method stub
		return null;
	}

}
